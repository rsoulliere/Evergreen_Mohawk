<?xml version='1.0' encoding='UTF-8'?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:id="conditional">
  <title>Conditional Text</title>
  <section xml:id="ConditionalWriting">
    <title>Writing with Conditional Text</title>
    <simplesect>
      <title>Overview</title>
      <para>The guidelines on using conditional text are based on the <emphasis>Profiling</emphasis>
        chapter from <link xl:href="http://www.sagehill.net/docbookxsl/index.html">DocBook XSL: The
          Complete Guide</link>, by Bob Stayton. The current chapter does not describe all of the
        features supported by DocBook XSL. In particular, this chapter discusses profiling using
        only the <tag class="attribute">condition</tag> attribute, whereas the <emphasis>DocBook
          XSL</emphasis> book also describes how to support profiling using other DocBook
        attributes.</para>
    </simplesect>
    <simplesect>
      <title>Conditionalizing elements</title>
      <para>To conditionalize an element, set the element's <tag class="attribute">condition</tag>
        attribute to the name of the condition you want to apply. For example, to conditionalize a
        text block with the <code>fuse</code> condition:</para>
      <programlisting>&lt;simplesect condition="fuse">
    ...
&lt;/simplesect></programlisting>
      <para>When you conditionalize an element, the condition is applied to <emphasis>all of the
          enclosed text and every sub-element</emphasis> of the conditionalized element. This
        mechanism is flexible, because every element in DocBook supports the <tag class="attribute"
          >condition</tag> attribute. For example, you can conditionalize an entire <tag
          class="element">chapter</tag>, a <tag class="element">section</tag>, a <tag
          class="element">figure</tag>, an <tag class="element">example</tag>, or even an individual
          <tag class="element">code</tag> element.</para>
    </simplesect>
    <simplesect>
      <title>Conditionalizing free-standing text</title>
      <para>There is one special case not covered by the mechanism for conditionalizing elements.
        What do you do, if you want to conditionalize a fragment of text that does not correspond to
        an element? For example, you might want to conditionalize a sentence within a paragraph. In
        this case, you can use the <tag class="element">phrase</tag> element to enclose the text
        fragment and then apply the requisite condition to the <tag class="element">phrase</tag>
        element.</para>
      <para>The following example shows how to conditionalize a sentence so that it appears only in
        the Artix version of the book:</para>
      <programlisting>&lt;para&gt;&amp;prodname; supports a multitude of integration options.
&lt;phrase condition="artix">In particular, you can optionally plug in a mainframe integration kit&lt;/phrase>
&lt;/para></programlisting>
    </simplesect>
    <simplesect>
      <title>Conditionalizing comments</title>
      <para>You can also use conditional text to manage draft comments in a book. These are the kind
        of comments that you would like to make visible in a draft copy of the output: for example,
        reminders to self and directions to the reviewer. It is recommended that you insert comments
        using the remark element with the <code>comment</code> condition applied. For
        example:</para>
      <programlisting>&lt;remark condition="comment">REVISIT - Your comment here!&lt;/remark></programlisting>
      <para>To simplify entering comments, the Evergreen template for the Oxygen editor includes a
        custom option, <guimenuitem>DocBook4 | Insert Comment</guimenuitem>, which automatically
        inserts a conditionalized <tag class="element">remark</tag> element.</para>
    </simplesect>
    <simplesect>
      <title>Applying multiple conditions</title>
      <para>If required, you can apply multiple conditions to a single element, using the semicolon,
          <literal>;</literal>, as the separator character. For example, to apply both the
          <code>unix</code> and <code>win</code> conditions to a <tag class="element"
          >simplesect</tag> element, set the <tag class="attribute">condition</tag> attribute as
        follows:</para>
      <programlisting>&lt;simplesect condition="unix;win"> ... &lt;/simplesect></programlisting>
      <para>Semantically, the effect of setting both of these conditions is that, at build time, the
          <tag class="element">simplesect</tag> element will be included in the output if either the
          <code>unix</code> condition OR the <code>win</code> condition is enabled.</para>
    </simplesect>
  </section>
  <section xml:id="ConditionalBuilding">
    <title>Building Books with Conditional Text</title>
    <simplesect>
      <title>Overview</title>
      <para>When building a book with conditional text, you need to use a special Ant build file to
        produce the output. The targets of the conditional build file are the same as a regular
        build file, but the process for generating the output is slightly different. When building a
        conditional book, the build system first generates an intermediate file,
            <filename><replaceable>bookname</replaceable>.prfl</filename>, which contains a version
        of the <filename><replaceable>bookname</replaceable>.xml</filename> book where all of the
        conditions have been applied. The
          <filename><replaceable>bookname</replaceable>.prfl</filename> file is then used as the
        input for the next stage of book building, using the regular templates for HTML and
        PDF.</para>
    </simplesect>
    <simplesect>
      <title>Steps for building with conditions</title>
      <para>To build a book with conditions, perform the following steps:</para>
      <orderedlist>
        <listitem>
          <para><xref linkend="ConditionalBuildingGet"/></para>
        </listitem>
        <listitem>
          <para><xref linkend="ConditionalBuildingSet"/></para>
        </listitem>
        <listitem>
          <para><xref linkend="ConditionalBuildingBuild"/></para>
        </listitem>
      </orderedlist>
    </simplesect>
    <simplesect xml:id="ConditionalBuildingGet">
      <title>Get the conditional build.xml file</title>
      <para>To build a book with conditional text, use the conditional version of the Ant
          <filename>build.xml</filename> file. In the <filename>docs_tools</filename> SVN
        repository, look for the following file:
          <filename>trunk/docbook-output/dcbk/custom/build_book_with_conditions.xml</filename></para>
      <para>Copy this build file into your book directory and rename it to
          <filename>build.xml</filename>.</para>
    </simplesect>
    <simplesect xml:id="ConditionalBuildingSet">
      <title>Set conditions in build.xml</title>
      <para>In addition to the usual book properties that you must set in a
          <filename>build.xml</filename> file (that is, <code>ROOT</code>, <code>DOCID</code>, and
          <code>LOGO</code>), you must also set a <code>CONDITIONS</code> property that lists the
        conditions you want to enable. If you want to enable multiple conditions, separate them
        using a semicolon character, for example:</para>
      <programlisting>    &lt;property name="CONDITIONS" value="condition1;condition2" /></programlisting>
      <para>This setting would ensure that any conditions marked with <code>condition1</code> AND
        any conditions marked with <code>condition2</code> are included in the output. In other
        words, the more conditions you specify here, the more output text you might get.</para>
    </simplesect>
    <simplesect xml:id="ConditionalBuildingBuild">
      <title>Build the book</title>
      <para>The conditional <filename>build.xml</filename> file supports the same Ant targets for
        building a book as the normal <filename>build.xml</filename> file. For example, to build
        both the HTML and PDF output, you can execute Ant with the default target, as
        follows:</para>
      <programlisting>> ant</programlisting>
      <para>The build file also supports the <code>db</code>, <code>pdf</code>, and
          <code>html</code> Ant targets. In the course of generating the document output, the build
        file produces an intermediate file,
          <filename><replaceable>bookname</replaceable>.prfl</filename>, which is a DocBook XML file
        to which the conditions have been applied.</para>
    </simplesect>
    <simplesect>
      <title>Example</title>
      <para><xref linkend="ConditionalBuildingExSSCBF"/> shows the top of the
          <filename>build.xml</filename> file for the FUSE Mediation Router Programmer's Guide,
        including conditional settings. This book is shared between the FUSE and Artix product.
        FUSE-specific parts of the book are marked with the condition, <code>fuse</code>, and
        Artix-specific parts of the book are marked, <code>artix</code>. <xref
          linkend="ConditionalBuildingExSSCBF"/> shows the settings for building the FUSE version of
        the book in draft format.</para>
      <example xml:id="ConditionalBuildingExSSCBF">
        <title>Sample Settings in a Conditional build.xml File</title>
        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;project name="MRGettingStarted" default="all" basedir=".">
    &lt;property environment="env" />
    &lt;!-- Choose one of the following common build files to import:
             build_artix_common.xml (Artix)
             build_fuse_common.xml  (FUSE)
    -->
    &lt;import file="${env.DBCK_HOME}/lib/build_fuse_common.xml"/>

    &lt;!-- Edit the following properties for your book: -->
    &lt;property name="ROOT" value="prog_guide" />    
    &lt;property name="DOCID" value="FuseMRProg" />
    &lt;property name="LOGO" value="fmr" />
    &lt;property name="CONDITIONS" value="fuse;comment" />

    &lt;!-- DO NOT MODIFY ANYTHING BELOW THIS LINE -->
    ...</programlisting>
      </example>
      <para>Where the <code>CONDITIONS</code> property specifies two conditions: <code>fuse</code>
        and <code>comment</code>. This build file processes the conditions as follows:</para>
      <itemizedlist>
        <listitem>
          <para>Unmarked elements not enclosed by conditionalized elements are included in the
            output.</para>
        </listitem>
        <listitem>
          <para>Elements marked with the <code>artix</code> condition are
              <emphasis>excluded</emphasis> from the output.</para>
        </listitem>
        <listitem>
          <para>Elements marked with the <code>fuse</code> condition are
              <emphasis>included</emphasis> in the output.</para>
        </listitem>
        <listitem>
          <para>Elements marked with the <code>comment</code> condition are
              <emphasis>included</emphasis> in the output.</para>
        </listitem>
      </itemizedlist>
    </simplesect>
    <simplesect>
      <title>Managing comments</title>
      <para>Unlike other conditions, which typically remain unchanged for a long time, the
          <code>comment</code> condition changes relatively frequently, as you switch between
        producing draft copies and release copies. It is something that you need to keep in mind,
        when building a release, that you need to disable the <code>comment</code> condition before
        building the output.</para>
    </simplesect>
    <simplesect>
      <title>Building without conditions</title>
      <para>It is not possible to build a book with a blank <code>CONDITIONS</code> property. If you
        want to build a book without conditions, you could either replace the conditional
          <filename>build.xml</filename> file with a regular <filename>build.xml</filename> file or
        you could enable every condition in the <code>CONDITIONS</code> property (thereby ensuring
        that the complete source is processed).</para>
    </simplesect>
  </section>
</chapter>
