<?xml version='1.0' encoding='UTF-8'?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:id="links">
  <title>Cross-References and Links</title>
  <info>
    <abstract>
      <para>DocBook has three linking elements that are used to create internal cross-references,
        external cross-references, and links to locations on the Web. Some of the linking elements
        perform multiple tasks and some have overlapping functionality. Authors choose the proper
        element based on the specifics of the task at hand. A portion of the link text is generated
        by the publication system and the author has some control over it.</para>
    </abstract>
  </info>
  <section xml:id="linksInternal">
    <title>Cross-References within the Same File or Book</title>
    <simplesect>
      <title>Overview</title>
      <para>Internal cross-references link to targets within the same file or book. There are two
        linking elements that can be used to make an internal cross-reference:</para>
      <itemizedlist>
        <listitem>
          <para><link linkend="xref">
              <tag class="element">xref</tag>
            </link>-generates a cross-reference whose target is in the same file.</para>
        </listitem>
        <listitem>
          <para><link linkend="link">
              <tag class="element">link</tag>
            </link>-generates a cress-reference whose target is in the same file but allows the
            author to provide the link text.</para>
        </listitem>
        <listitem>
          <para><link linkend="olinkInternal">
              <tag class="element">olink</tag>
            </link>-generates a cross-reference whose target is in a different file. The <tag
              class="element">olink</tag> element allows the author to use either generated link
            text or author supplied link text.</para>
        </listitem>
      </itemizedlist>
    </simplesect>
    <simplesect xml:id="xref">
      <title>Inserting a cross-reference in the same file, using generated text</title>
      <indexterm>
        <primary>xref element</primary>
      </indexterm>
      <indexterm>
        <primary>linking</primary>
        <secondary>using generated text</secondary>
      </indexterm>
      <indexterm>
        <primary>cross referencing</primary>
      </indexterm>
      <para>The <tag class="element">xref</tag> element creates a link to an element in the same
        file. It requires the use of the <tag class="attribute">linkend</tag> attribute to identify
        the target element.</para>
      <para>The <tag class="element">xref</tag> element does not have any content. The link text is
        generated based on the contents of the target element. <anchor xml:id="xreftextgen"/>If the
        target element has a <tag class="element">title</tag> element, such as a <tag
          class="element">section</tag> element or an <tag class="element">example</tag> element,
        the contents of the <tag class="element">title</tag> element is used as the link text.
        Alternatively, the value of the target element's <tag class="attribute">xreflabel</tag>
        attribute will be used as the link text.</para>
      <important>
        <para>If the referenced element has both a <tag class="element">title</tag> element and a
          value specified in its <tag class="attribute">xreflabel</tag> attribute, the value of the
            <tag class="attribute">xreflabel</tag> attribute is used.</para>
      </important>
      <tip>
        <para>The default generated text for a PDF cross-reference includes the page number of the
          target. The generated text can be changed using the <tag class="attribute">xrefstyle</tag>
          attribute. See <xref linkend="linkStyling"/>.</para>
      </tip>
      <para><xref linkend="xrefexample1"/> shows an example of a cross reference whose text is
        derived from the <tag class="element">title</tag> element of the referenced element. The
        resulting link text would be <literal>the section called "Coco Crisp"
        shows</literal>.</para>
      <example xml:id="xrefexample1">
        <title>Cross Reference to a Titled Element</title>
        <programlisting>&lt;para&gt;<emphasis role="bold">&lt;xref linkend="topsect" /&gt;</emphasis> shows ...&lt;/para&gt;
...
&lt;section id=&quot;topsect&quot;&gt;
  &lt;title&gt;Coco Crisp&lt;/title&gt;
...
&lt;/section&gt;</programlisting>
      </example>
      <para><xref linkend="xrefexample2"/> shows an example of a cross reference whose text is
        derived from the <tag class="attribute">xreflabel</tag> attribute of the targeted element.
        The resulting link text would be <literal>outfielder shows</literal>.</para>
      <example xml:id="xrefexample2">
        <title>Cross Reference to an Element with an xreflabel</title>
        <programlisting>&lt;para&gt;&lt;xref linkend=&quot;example1&quot; /&gt; shows ...&lt;/para&gt;
...
&lt;example id=&quot;example1&quot; xreflabel=&quot;outfielder&quot;&gt;
  &lt;title&gt;Catching Coco Crisp&lt;/title&gt;
  ...
&lt;/example&gt;</programlisting>
      </example>
    </simplesect>
    <simplesect xml:id="link">
      <title>Inserting link using author supplied text</title>
      <indexterm>
        <primary>link element</primary>
      </indexterm>
      <indexterm>
        <primary>linking</primary>
        <secondary>using author text</secondary>
      </indexterm>
      <para>Internal links are created using the <tag class="element">link</tag> element. The <tag
          class="element">link</tag> element has one required attribute, <tag class="attribute"
          >linkend</tag>, whose value is the id of element anchoring the link. The anchoring element
        can be any valid DocBook element that uses the <tag class="attribute">xml:id</tag>
        attribute. For example if you wanted to create a link to an image in your document, you
        would use the id of the <tag class="element">figure</tag> element that wraps the
        image.</para>
      <para>The text used for the link is the content of the <tag class="element">link</tag>
        element. <xref linkend="linkexample"/> shows the mark up for this <link linkend="link">link
          to the top</link> of this section.</para>
      <example xml:id="linkexample">
        <title>Example of an Internal Link</title>
        <programlisting>&lt;section xml:id="link"&gt;
  ...
  &lt;para&gt;... this <emphasis role="bold">&lt;link linkend=&quot;link&quot;&gt;link to the top&lt;/link&gt;</emphasis> of ...&lt;/para&gt;
  ...
&lt;/section&gt;</programlisting>
      </example>
      <tip>
        <para>The default generated text for a PDF link includes the page number of the target. The
          generated text can be changed using the <tag class="attribute">xrefstyle</tag> attribute.
          See <xref linkend="linkStyling"/>.</para>
      </tip>
    </simplesect>
    <simplesect xml:id="olinkInternal">
      <title>Inserting a link to a target element in a different source file</title>
      <indexterm>
        <primary>olink element</primary>
      </indexterm>
      <indexterm>
        <primary>linking</primary>
        <secondary>external source file</secondary>
      </indexterm>
      <para>The <tag class="element">olink</tag> element facilitates cross-linking among DocBook
        files (just as <tag class="element">xref</tag> and <tag class="element">link</tag> elements
        enable linking within files).</para>
      <indexterm>
        <primary>olink element</primary>
      </indexterm>
      <indexterm>
        <primary>linking</primary>
        <secondary>across books</secondary>
      </indexterm>
      <indexterm>
        <primary>site map</primary>
      </indexterm>
      <para>You create a link to another book using the <tag class="element">olink</tag>
        element.</para>
      <para>Two attributes associated with the <tag class="element">olink</tag> element are used to
        specify the link target:</para>
      <variablelist>
        <varlistentry>
          <term>
            <tag class="attribute">targetptr</tag>
          </term>
          <listitem>
            <para>The value of the link target's <tag class="attribute">xml:id</tag>
              attribute</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <tag class="attribute">targetdoc</tag>
          </term>
          <listitem>
            <para>The value of the <tag class="attribute">targetdoc</tag> attribute of the target
              document. </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>For simplicity's sake, use the document's xml:id attribute as the document identifier;
        it will then function as both the <tag class="element">targetdoc</tag> and <tag
          class="element">targetptr</tag> element. So the <tag class="element">olink</tag> reference
        for this file would be filenames, as in this example:</para>
      <para>See the chapter on &lt;olink targetdoc="lists" targetpr="lists"&gt;creating
        lists&lt;/olink&gt; </para>
    </simplesect>
  </section>
  <section>
    <title>Cross-References to Other Books</title>
    <simplesect>
      <title>Overview</title>
      <para>Authors can create cross-references to a different book in a set using the <tag
          class="element">olink</tag> element. When linking to a different book, an author needs to
        use an additional attribute to specify the book in which the target element is located. The
        external linking mechanism relies on a site map and a number of target databases.</para>
    </simplesect>
    <simplesect>
      <title>Specifying the link text</title>
      <para>DocBook provides two methods for specifying link text for <tag class="element"
          >olink</tag> elements: author-supplied and auto-generated. Evergreen documentation uses
        author-supplied link text.</para>
      <para>Creating an olink between books</para>
      <para>adfasfsda</para>
    </simplesect>
    <simplesect>
      <title>Setting up the olink site map</title>
      <indexterm>
        <primary>site map</primary>
      </indexterm>
      <indexterm>
        <primary>linking</primary>
        <secondary>external XML source</secondary>
        <tertiary>making a site map</tertiary>
      </indexterm>
      <para>
        <note>
          <para>Most Evergreen documentation authors do not have to worry about creating or
            maintaining the site map for olinks in Evergreen documentation. This is set up in
            advance by the same team that manages the file commits.</para>
        </note>
      </para>
      <para>Stayton notes in DocBook XSL, "To form cross references between documents in HTML, their
        relative locations must be known." The olink site map defines how the published
        documentation set will be laid out and allows the publication system to resolve the links
        between all of the documents in the set.</para>
      <para>The site map for a documentation set is placed at the root of the documentation source
        tree and is always called <filename>site.xml</filename>. <xref linkend="LinksCalloutExample"
        /> shows a sample site map.</para>
      <example xml:id="LinksCalloutExample" pgwide="1">
        <?dbfo pgwide="1"?>
        <title>Document Set Site Map</title>
        <programlisting language="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; <co linkends="sitemapptr0" xml:id="sitemapco0"/>
&lt;targetset&gt;<co linkends="sitemapptr3" xml:id="sitemapco3"/>
  &lt;targetsetinfo&gt;<co linkends="sitemapptr4" xml:id="sitemapco4"/>
    &lt;title&gt;Library Title&lt;/tite&gt; <co linkends="sitemapptr41" xml:id="sitemapco41"/>
    &lt;desc&gt;Site map for the Evergreen XML Style Guide&lt;/desc&gt; <co linkends="sitemapptr42" xml:id="sitemapco42"/>
  &lt;/targetsetinfo&gt;
  &lt;sitemap&gt;<co linkends="sitemapptr5" xml:id="sitemapco5"/>
    &lt;dir name=&quot;docs_rls_inferno&quot;&gt;<co linkends="sitemapptr6" xml:id="sitemapco6"/>
      &lt;dir name=&quot;fluff&quot;&gt;<co linkends="sitemapptr75" xml:id="sitemapco75"/>
        &lt;dir name=&quot;overview&quot;&gt;<co linkends="sitemapptr7" xml:id="sitemapco7"/>
          &lt;document targetdoc=&quot;InfernoOverview&quot;&gt; <co linkends="sitemapptr8" xml:id="sitemapco8"/>
           &lt;xi:include href="overview/target.db" xmlns:xi="http://www.w3.org/2001/XInclude" /&gt; <co linkends="sitemapptr9" xml:id="sitemapco9"/>
          &lt;/document&gt;
        &lt;/dir&gt;
      &lt;/dir&gt;
      &lt;dir name=&quot;install_guide&quot;&gt;
        &lt;document targetdoc=&quot;InfernoInstall&quot;&gt;
        &lt;xi:include href="install_guide/target.db" xmlns:xi="http://www.w3.org/2001/XInclude" /&gt;
        &lt;/document&gt;
      &lt;/dir&gt;
      &lt;dir name=&quot;getting_started&quot;&gt;
        &lt;document targetdoc=&quot;InfernoGetStarted&quot;&gt;
        &lt;xi:include href="get_started/target.db" xmlns:xi="http://www.w3.org/2001/XInclude" /&gt;
        &lt;/document&gt;
      &lt;/dir&gt;
    &lt;/dir&gt;
  &lt;/sitemap&gt;
&lt;/targetset&gt;</programlisting>
      </example>
      <calloutlist>
        <title>Elements of the Site Map</title>
        <callout arearefs="sitemapco0" xml:id="sitemapptr0">
          <para>The site map should always be encoded as UTF-8. This ensures that all of the
            generated target data has the same encodings regardless of the encodings used by the XML
            source files.</para>
        </callout>
        <callout arearefs="sitemapco3" xml:id="sitemapptr3">
          <para>The <tag class="element">targetset</tag> element is the root of the site map.</para>
        </callout>
        <callout arearefs="sitemapco4" xml:id="sitemapptr4">
          <para>The <tag class="element">targetsetinfo</tag> element allows you to provide a
            description for the document set or any other information that is relevant to the site
            map.</para>
        </callout>
        <callout arearefs="sitemapco41" xml:id="sitemapptr41">
          <para>The <tag class="element">title</tag> element allows you to provide a title to be
            used on the generated index page.</para>
        </callout>
        <callout arearefs="sitemapco42" xml:id="sitemapptr42">
          <para>The <tag class="element">desc</tag> element allows you to provide a description for
            the document set that will appear at the top of the generated index page.</para>
        </callout>
        <callout arearefs="sitemapco5" xml:id="sitemapptr5">
          <para>The <tag class="element">sitemap</tag> element contains the directory layout of the
            output files.</para>
        </callout>
        <callout arearefs="sitemapco6" xml:id="sitemapptr6">
          <para>The name of the top-level directory is not important in the generation of the target
            databases for the links. The links are generated relative to the top-level
            directory.</para>
        </callout>
        <callout arearefs="sitemapco75" xml:id="sitemapptr75">
          <para>This is a directory that only contains other directories.</para>
        </callout>
        <callout arearefs="sitemapco7" xml:id="sitemapptr7">
          <para>This directory holds a generated book.</para>
        </callout>
        <callout arearefs="sitemapco8" xml:id="sitemapptr8">
          <para>The <tag class="element">document</tag> element's <tag class="attribute"
              >targetdoc</tag> attribute specifies the identifier used in the <tag class="element"
              >olink</tag> element's <tag class="attribute">targetdoc</tag> attribute when linking
            to targets in the document.</para>
        </callout>
        <callout arearefs="sitemapco9" xml:id="sitemapptr9">
          <para>The target database is included in the site map using an <tag class="element"
              >xi:include</tag> element. The path for each book's target database should be
                <filename><replaceable>book_src_dir</replaceable>/target.db</filename>.</para>
        </callout>
      </calloutlist>
    </simplesect>
  </section>
  <section xml:id="ulink">
    <title>Linking to Web Pages</title>
    <simplesect>
      <title>Creating the link</title>
      <indexterm>
        <primary>link element</primary>
        <secondary>xl:href attribute</secondary>
      </indexterm>
      <indexterm>
        <primary>linking</primary>
        <secondary>Web pages</secondary>
      </indexterm>
      <para>Links to Web pages are created using the <tag class="element">link</tag> element. You
        identify the target Web site using the <tag class="attribute">xl:href</tag> attribute. The
        value must be a valid URL.</para>
    </simplesect>
    <simplesect>
      <title>Specifying the link text</title>
      <para>The link text can be specified in one of two ways. You can specified the desired link
        text as the value of the <tag class="element">link</tag> element. If you leave the <tag
          class="element">link</tag> element empty, the value of the <tag class="attribute"
          >xl:href</tag> attribute will be used as the link text.</para>
      <tip>
        <para>The PDF will always show the URL in the generated text.</para>
      </tip>
    </simplesect>
    <simplesect>
      <title>Examples</title>
      <para><xref linkend="ulinkexample1"/> shows an example of an external link with supplied link
        text.</para>
      <example xml:id="ulinkexample1">
        <title>External Link with Link Text</title>
        <programlisting language="xml">&lt;link xl:href=&quot;http://www.cxf.org&quot;&gt;CXF Home&lt;/link&gt;</programlisting>
      </example>
      <para><xref linkend="ulinkexample2"/> shows an example of an external link that uses the
        default link text.</para>
      <example xml:id="ulinkexample2">
        <title>External Link Using Default Link Text</title>
        <programlisting>&lt;link xl:href=&quot;http://www.cxf.org&quot; /&gt;</programlisting>
      </example>
    </simplesect>
  </section>
  <section xml:id="linkAnchor">
    <title>Creating Anchor Points</title>
    <indexterm>
      <primary>anchor element</primary>
    </indexterm>
    <indexterm>
      <primary>linking</primary>
      <secondary>creating a target</secondary>
    </indexterm>
    <simplesect>
      <title>Overview</title>
      <para>Authors can create anchor points in your text using the <tag class="element"
          >anchor</tag> element. The <tag class="element">anchor</tag> element does not have any
        content and does not result in any generated text. It simply marks a place in the content
        that can be the target of a link.</para>
    </simplesect>
    <simplesect>
      <title>Marking an anchor point</title>
      <para>The <tag class="element">anchor</tag> element is empty. It has a required <tag
          class="attribute">xml:id</tag> attribute that is the ID used for linking to the anchor. In
        addition, it can take a <tag class="attribute">xreflabel</tag> attribute that provides the
        generated text for an <tag class="element">xref</tag> element or an empty <tag
          class="element">olink</tag> element.</para>
    </simplesect>
    <simplesect>
      <title>Example</title>
      <para><xref linkend="anchorEx"/> shows the mark-up for placing an anchor in a document.</para>
      <example xml:id="anchorEx">
        <title>Creating an Anchor</title>
        <programlisting language="docbook">&lt;section ...&gt;
  ...
  <emphasis role="bold">&lt;anchor xml:id="anchorID" xreflabel="here" /&gt;</emphasis>
  ...
  &lt;para&gt;&lt;xref linkend="anchorID" /&gt; is a link to an anchor.&lt;/para&gt;
  ...
&lt;/section&gt;</programlisting>
        <para>The generated text from the mark-up in <xref linkend="anchorEx"/> is <literal>here is
            a to an anchor.</literal> and the <literal>here</literal> would be a link back to the
          anchor.</para>
      </example>
    </simplesect>
  </section>
  <section xml:id="linkStyling">
    <title>Controlling the Generated Link Text</title>
    <simplesect>
      <title>Overview</title>
      <para>The publication system adds page numbers to all cross-references in PDF books. For
        cross-references that use generated text, the publication makes choices about what text is
        appropriate for the cross-reference. In some cases the defaults used by the publication is
        not appropriate. In these cases, the author can modify the generated link text using the
          <tag class="attribute">xrefstyle</tag> attribute.</para>
    </simplesect>
    <simplesect>
      <title>The xrefstyle attribute</title>
      <para>The <tag class="attribute">xrefstyle</tag> attribute's value is a string pattern. All of
        the patterns that can be used are described in Bob Stayton's <citetitle
          xl:href="http://sagehill.net/docbookxsl/CustomXrefs.html#Xrefstyle">DocBook XSL: The
          Complete Guide</citetitle>.</para>
      <para>The pattern most commonly used in the Evergreen authoring system is the
          <literal>select</literal> pattern. This pattern is specified using the syntax shown in
          <xref linkend="xrefstyleSelectEx"/>.</para>
      <example xml:id="xrefstyleSelectEx">
        <title>Syntax for the Select Pattern</title>
        <programlisting language="docbook">&lt;xref ... <emphasis role="bold">xrefstyle="select: <replaceable>opt1</replaceable> <replaceable>opt2</replaceable> ... <replaceable>optN</replaceable>"</emphasis> /&gt;</programlisting>
      </example>
      <para>The values for <replaceable>optN</replaceable> select the text generated for the link
        text.</para>
    </simplesect>
    <simplesect>
      <title>Turning off page numbers</title>
      <para>Authors can turn off the generation of page numbers in the PDF using the
          <literal>nopage</literal> option in the select pattern. This option instructs the link
        generation algorithm to not generate page numbers, however it does not provide any guidance
        about what to include in the generated text. For <tag class="element">link</tag> elements
        and <tag class="element">olink</tag> elements that provide a value for the link text, the
          <literal>nopage</literal> option produces a the supplied link text without a page number.
        For <tag class="element">xref</tag> elements and <tag class="element">olink</tag> elements
        that rely on the publication system to generate the link text, the <literal>nopage</literal>
        is insufficient to create a valid link. The author will need to provide either the <link
          linkend="linksLabel" xrefstyle="select: nopage">label</link> option to the pattern or the
          <link linkend="linksTitle" xrefstyle="select: nopage">title</link> option to the selection
        pattern.</para>
      <para><xref linkend="linkexample2"/> shows a <tag class="element">link</tag> element that
        would not generate a page number.</para>
      <example xml:id="linkexample2" pgwide="1">
        <?dbfo pgwide="1"?>
        <title>Example of an Internal Link with no Page Number</title>
        <programlisting>&lt;section xml:id="link"&gt;
  ...
  &lt;para&gt;... this <emphasis role="bold">&lt;link linkend="link" xrefstyle="select: nopage"&gt;link to the top&lt;/link&gt;</emphasis> of ...&lt;/para&gt;
  ...
&lt;/section&gt;</programlisting>
      </example>
    </simplesect>
    <simplesect xml:id="linksLabel">
      <title>Using the target's label</title>
      <para>Figures, tables, and examples have labels that are used to generate the link text. To
        ensure that an <tag class="element">xref</tag> element or an <tag class="element"
          >olink</tag> element that relies on the publication system to generate the link text will
        produce link text when page numbering is turned off, the author needs to provide the
          <literal>label</literal> option to the selection pattern.</para>
      <para><xref linkend="linkexample3"/> shows an <tag class="element">xref</tag> element that
        generates a label without a page number.</para>
      <example xml:id="linkexample3" pgwide="1">
        <?dbfo pgwide="1"?>
        <title>A Cross-Reference to a Figure with no Page Number</title>
        <programlisting>&lt;figure xml:id="link"&gt;
  ...
&lt;/figure&gt;
&lt;para&gt;<emphasis role="bold">&lt;xref linkend="link" xrefstyle="select: nopage label" /&gt;</emphasis> shows ...&lt;/para&gt;
...
</programlisting>
      </example>
    </simplesect>
    <simplesect xml:id="linksTitle">
      <title>Using the target's title</title>
      <para>Chapters, sections, and blocks have titles that are used to generate the link text. To
        ensure that an <tag class="element">xref</tag> element or an <tag class="element"
          >olink</tag> element that relies on the publication system to generate the link text will
        produce link text when page numbering is turned off, the author needs to provide the
          <literal>title</literal> option to the selection pattern.</para>
      <para><xref linkend="linkexample4"/> shows an <tag class="element">xref</tag> element that
        generates a title without a page number.</para>
      <example xml:id="linkexample4" pgwide="1">
        <?dbfo pgwide="1"?>
        <title>A Cross-Reference to a Block with no Page Number</title>
        <programlisting>&lt;simplesect xml:id="link"&gt;
  ...
&lt;/simplesect&gt;
...
&lt;para&gt;As discussed in <emphasis role="bold">&lt;olink targetptr="link" xrefstyle="select: nopage label" /&gt;</emphasis> ...&lt;/para&gt;
...
</programlisting>
      </example>
    </simplesect>
  </section>
</chapter>
