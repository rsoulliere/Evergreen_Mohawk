<?xml version='1.0' encoding='UTF-8'?>
<chapter xmlns="http://docbook.org/ns/docbook"
xmlns:xi="http://www.w3.org/2001/XInclude"
xmlns:xl="http://www.w3.org/1999/xlink"
version="5.0"
xml:id="programming">
  <title>Working with Code</title>
  <info>
    <abstract>
      <para>There are several instances when you will need to show code in documentation. You may need to use a class name, an interface name, 
        or an element name as part of a sentence. You will also need to provide long code samples in many places. DocBook has a number of 
        elements that are used for placing code in your documentation.</para>
    </abstract>
  </info>
  <section>
    <title>Code Listings</title>
    <para>There are two types of code listings:</para>
    <itemizedlist>
      <listitem linkend="exampleSect">
        <para>Formal examples with titles</para>
      </listitem>
      <listitem linkend="codeBlockSect">
        <para>Untitled code blocks</para>
      </listitem>
    </itemizedlist>
    <para>Often when making long code listings a writer also needs to explain what specific lines of code do. This can be done using 
    callouts as explained in <xref linkend="calloutSect" /></para>
    <section xml:id="exampleSect">
      <title>Examples</title>
      <simplesect>
        <title>When to use</title>
        <para>Examples are formal code listings that have a title. They are useful for code listings that are linked to from other places in 
          the text. They are also added to the <emphasis>List of Examples</emphasis>.</para>
      </simplesect>
      <simplesect>
        <title>Marking up an example</title>
        <indexterm><primary>example element</primary></indexterm>
        <indexterm><primary>programlisting element</primary></indexterm>
        <para>Examples are marked up using the <tag class="element">example</tag> element. You should always provide a descriptive value for 
          the <tag class="element">example</tag> element's <tag class="attribute">xml:id</tag> attribute. The 
        <tag class="element">example</tag> element also takes a <tag class="attribute">pgwide</tag> attribute that signals that the 
        code listing should span the width of the page.<footnote><para>The <tag class="attribute">pgwide</tag> attribute is not currently 
        supported by the publication system. Writers will also need the PI for making code blocks wide as shown in 
          <xref linkend="examplePgwideSS" />.</para></footnote></para>
        <para>The first child of the <tag class="element">example</tag> element is a <tag class="element">title</tag> element. The contents of 
        the title element will be used as the caption of the example. It will also be used as the text for any cross references.</para>
        <para>The last child of the example element is the <tag class="element">programlisting</tag> element. The 
        <tag class="element">programlisting</tag> element contains the code sample itself. Any text placed inside the 
        <tag class="element">programlisting</tag> element is treated literally. Therefore, any spacing that you use will be exactly reproduced 
        when the document is produced.</para>
      <warning>
        <para>When using XML inside a <tag class="element">programlisting</tag> element you must not use the <literal>&lt;</literal> or 
          <literal>&gt;</literal> characters. Instead use <wordasword>&amp;lt;</wordasword> and <wordasword>&amp;gt;</wordasword>.</para>
      </warning>
        <para>The <tag class="element">programlisting</tag> element takes a <tag class="attribute">language</tag> attribute that 
        specifies the type of code in the example. <xref linkend="languageAttrTbl"/> describes the acceptable values.</para>
        <table xml:id="languageAttrTbl">
          <title>Values for the Program Listing Language Attribute</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Value</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><tag class="attvalue">java</tag></entry>
                <entry>Specifies that the listing is Java code.</entry>
              </row>
              <row>
                <entry><tag class="attvalue">spring</tag></entry>
                <entry>Specifies that the listing is Spring XML. This is often used in configuration files.</entry>
              </row>
              <row>
                <entry><tag class="attvalue">wsdl</tag></entry>
                <entry>Specifies that the listing is WSDL.</entry>
              </row>
              <row>
                <entry><tag class="attvalue">xmlschema</tag></entry>
                <entry>Specifies that the code listing is XML Schema. This is often seen in the type's section of a WSDL document.</entry>
              </row>
              <row>
                <entry><tag class="attvalue">xml</tag></entry>
                <entry>Specifies that the code listing is XML.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </simplesect>
      <simplesect>
        <title>Example</title>
        <para><xref linkend="example_example"/> shows the mark-up for an example.</para>
        <example xml:id="example_example" pgwide="1">
        <?dbfo pgwide="1"?>
        <title>Example Mark-Up</title>
        <programlisting>&lt;example id=&quot;example_example&quot;&gt;
&lt;title&gt;Example Service&lt;/title&gt;
&lt;programlisting language="java"&gt;public class ServiceName extends javax.xml.ws.Service
{
  ...
  public ServiceName(URL wsdlLocation, QName serviceName) { }
  
  public ServiceName() { }

  public Greeter getPortName() { }
  .
  .
  .
}&lt;/programlisting&gt;
&lt;/example&gt;</programlisting>
        </example>
        <para>The mark-up shown in <xref linkend="example_example" /> is generated into <xref linkend="exampleExampleGen" />.</para>
        <example xml:id="exampleExampleGen">
          <title>Example Service</title>
          <programlisting language="java">public class ServiceName extends javax.xml.ws.Service
{
  ...
  public ServiceName(URL wsdlLocation, QName serviceName) { }
  
  public ServiceName() { }

  public Greeter getPortName() { }
  .
  .
  .
}</programlisting>
        </example>
      </simplesect>
      <simplesect xml:id="examplePgwideSS">
        <title>Making the example span the page</title>
        <para>The code used for an example does not always fit properly in the space allotted for text in the PDF output template. To fix this 
        writers can specify that an example should span the entire page from the left margin to the right margin using the 
          <markup>&lt;?dbfo pgwide="1"?&gt;</markup> PI.</para>
        <para>As shown in <xref linkend="examplePgwideEx"/>, the <markup>&lt;?dbfo pgwide="1"?&gt;</markup> PI is placed directly 
        after the opening <tag class="element">example</tag> tag.</para>
        <example xml:id="examplePgwideEx">
        <?dbfo pgwide="1"?>
        <title>Wide Example Mark-Up</title>
        <programlisting>&lt;example id="examplePgwideEx"&gt;
&lt;?dbfo pgwide="1"?&gt;
&lt;title&gt;Example Service&lt;/title&gt;
&lt;programlisting language="java"&gt;
  .
  .
  .
}&lt;/programlisting&gt;
&lt;/example&gt;</programlisting>
        </example>
      </simplesect>
      </section>
    <section xml:id="codeBlockSect">
      <title>Code Blocks</title>
      <simplesect>
        <title>When to use</title>
        <para>Code blocks are useful for short code listings that show a specific action. They are not appropriate for code listings 
        that need to be referenced later. They also do not appear in the <emphasis>List of Examples</emphasis>.</para>
      </simplesect>
      <simplesect>
        <title>Mark-up</title>
        <indexterm><primary>informalexample element</primary></indexterm>
        <indexterm><primary>programlisting element</primary></indexterm>
         <para>Code blocks are marked up using the <tag class="element">informalexample</tag> element.</para>
        <para>The only child of the <tag class="element">informalexample</tag> element is a <tag class="element">programlisting</tag> element. 
          This element contains the code listing itself. Any text placed inside the <tag class="element">programlisting</tag> element is 
          treated literally. Therefore, any spacing that you use will be exactly reproduced when the document is produced.</para>
        <warning>
          <para>When using XML inside a <tag class="element">programlisting</tag> element you must not use the <literal>&lt;</literal> or 
          <literal>&gt;</literal> characters. Instead use <wordasword>&amp;lt;</wordasword> and <wordasword>&amp;gt;</wordasword>.</para>
        </warning>
        <para>The <tag class="element">programlisting</tag> element takes a <tag class="attribute">language</tag> attribute that 
        specifies the type of code in the example. <xref linkend="languageAttrTbl"/> describes the acceptable values.</para>
      </simplesect>
      <simplesect>
        <title>Example</title>
        <para><xref linkend="block_example"/> shows the mark-up for a standalone block of code.</para>
        <example xml:id="block_example" pgwide="1">
        <?dbfo pgwide="1"?>
        <title>Example Code Block</title>
        <programlisting>&lt;informalexample&gt;
  &lt;programlisting language="javascript"&gt;var WebServiceProvider1 = {
    &apos;wsdlLocation&apos;: &apos;file:./wsdl/hello_world.wsdl&apos;,
    &apos;serviceName&apos;: &apos;SOAPService1&apos;,
    &apos;portName&apos;: &apos;SoapPort1&apos;,
    &apos;targetNamespace&apos;: http://objectweb.org/hello_world_soap_http&apos;,
};&lt;/programlisting&gt;
&lt;/informalexample&gt;</programlisting>
          </example>
          <para>The mark-up shown in <xref linkend="block_example"/> would be published as follows:</para>
          <informalexample>
  <programlisting language="javascript">var WebServiceProvider1 = {
    'wsdlLocation': 'file:./wsdl/hello_world.wsdl',
    'serviceName': 'SOAPService1',
    'portName': 'SoapPort1',
    'targetNamespace': 'http://objectweb.org/hello_world_soap_http',
};</programlisting>
</informalexample>
      </simplesect>
      <simplesect xml:id="codeBlockPgwideSS">
        <title>Making the code block span the page</title>
        <para>Code listings do not always fit properly in the space allotted for text in the PDF output template. To fix this 
        writers can specify that a code listing should span the entire page from the left margin to the right margin using the 
          <markup>&lt;?dbfo pgwide="1"?&gt;</markup> PI.</para>
        <para>As shown in <xref linkend="codeBlockPgwideEx"/>, the <markup>&lt;?dbfo pgwide="1"?&gt;</markup> PI is placed directly 
        after the opening <tag class="element">informalexample</tag> tag.</para>
        <example xml:id="codeBlockPgwideEx">
        <?dbfo pgwide="1"?>
        <title>Wide Code Block Mark-Up</title>
        <programlisting>&lt;informalexample id="codeBlockPgwideEx"&gt;
&lt;?dbfo pgwide="1"?&gt;
&lt;programlisting language="java"&gt;
  .
  .
  .
}&lt;/programlisting&gt;
&lt;/informalexample&gt;</programlisting>
        </example>
      </simplesect>
      </section>
      <section xml:id="calloutSect">
        <title>Using Callouts</title>
        <indexterm><primary>co element</primary></indexterm>
        <indexterm><primary>calloutlist element</primary></indexterm>
        <para>It is often helpful to use callouts to explain what it happening in a section of code. Specifying callouts is a two step process:</para>
        <orderedlist>
          <listitem>
            <para>Specify where in the code listing you want to place callout markers.</para>
          </listitem>
          <listitem>
            <para>Specify the callout text for each callout.</para>
          </listitem>
        </orderedlist>
        <simplesect>
          <title>Specifying the callout locations</title>
          <para>To specify the placement of a callout in a program listing you place a <tag class="element">co</tag> element at the location inside of the program listing you want the callout to appear. The <tag class="element">co</tag> element requires that you set a value for its <tag class="attribute">id</tag> attribute. The value is used to associate the callout marker with the text that describes it. You should also provide a value for the <tag class="element">co</tag> element's <tag class="attribute">linkends</tag> attribute. This value will match the value of the <tag class="attribute">id</tag> attribute of the associated text. Using this attribute allows for a links to be generated between the callout and the associated text.</para>
          <note>
            <para>Setting the <tag class="attribute">linkends</tag> attribute before entering the callout text will result in an invalid XML file. Once you add the callout text, the file should be valid.</para>
          </note>
        </simplesect>
        <simplesect>
          <title>Specifying the callout text</title>
          <para>The text associated with a callout is specified outside of the <tag class="element">programlisting</tag> element and the <tag class="element">example</tag> element. Shortly after the <tag class="element">example</tag> element, preferably immediately after, you need to place a <tag class="element">calloutlist</tag> element. The <tag class="element">calloutlist</tag> element wraps the elements that specify the callout text. It contains an optional <tag class="element">title</tag> element and one <tag class="element">callout</tag> element for each callout specified for the associated program listing.</para>
          <para>Each <tag class="element">callout</tag> element must have its <tag class="attribute">arearefs</tag> attribute set to the value of <tag class="attribute">id</tag> attribute of the callout for which it defines the text. If you set the <tag class="attribute">linkends</tag> attribute of the associated <tag class="element">co</tag> element, you must also set the <tag class="element">callout</tag> element&apos;s <tag class="attribute">id</tag> attribute to the matching value. The callout text is the value of the <tag class="element">callout</tag> element.</para>
        </simplesect>
        <simplesect>
          <title>Example</title>
          <para><xref linkend="callout_example"/> shows the mark-up for  <olink targetptr="LinksCalloutExample"/>.</para>
          <example xml:id="callout_example" pgwide="1">
            <?dbfo pgwide="1"?>
              <title>Using Callouts</title>
              <programlisting>&lt;example xml:id="LinksCalloutExample"&gt;
&lt;dbfo pgwide="1"?&gt;
  &lt;title&gt;Document Set Site Map&lt;/title&gt;
  &lt;programlisting&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;co linkends="sitemapptr0" xml:id="sitemapco0"/&gt;
&lt;targetset&gt; &lt;co linkends="sitemapptr3" xml:id="sitemapco3"/&gt;
  &lt;targetsetinfo&gt; &lt;co linkends="sitemapptr4" xml:id="sitemapco4"/&gt;
    Site map for the Evergreen XML Style Guide
  &lt;/targetsetinfo&gt;
  &lt;sitemap&gt; &lt;co linkends="sitemapptr5" xml:id="sitemapco5"/&gt;
    &lt;dir name=&quot;docs_rls_inferno&quot;&gt; &lt;co linkends="sitemapptr6" xml:id="sitemapco6"/>
      &lt;dir name=&quot;fluff&quot;&gt; &lt;co linkends="sitemapptr75" xml:id="sitemapco75"/>
        &lt;dir name=&quot;overview&quot;&gt; &lt;co linkends="sitemapptr7" xml:id="sitemapco7"/>
          &lt;document targetdoc=&quot;InfernoOverview&quot;&gt; &lt;co linkends="sitemapptr8" xml:id="sitemapco8"/>
           &lt;xi:include href="overview/target.db" xmlns:xi="http://www.w3.org/2001/XInclude" /&gt; &lt;co linkends="sitemapptr9" xml:id="sitemapco9"/>
          &lt;/document&gt;
        &lt;/dir&gt;
      &lt;/dir&gt;
      &lt;dir name=&quot;install_guide&quot;&gt;
        &lt;document targetdoc=&quot;InfernoInstall&quot;&gt;
        &lt;xi:include href="install_guide/target.db" xmlns:xi="http://www.w3.org/2001/XInclude" /&gt;
        &lt;/document&gt;
      &lt;/dir&gt;
      &lt;dir name=&quot;getting_started&quot;&gt;
        &lt;document targetdoc=&quot;InfernoGetStarted&quot;&gt;
        &lt;xi:include href="get_started/target.db" xmlns:xi="http://www.w3.org/2001/XInclude" /&gt;
        &lt;/document&gt;
      &lt;/dir&gt;
    &lt;/dir&gt;
  &lt;/sitemap&gt;
&lt;/targetset&gt;&lt;/programlisting&gt;
&lt;/example&gt;
&lt;calloutlist&gt;
  &lt;title>Elements of the Site Map&lt;/title>
  &lt;callout arearefs="sitemapco0" xml:id="sitemapptr0"&gt;
    &lt;para>The site map should always be encoded as UTF-8. This ensures that all of the generated target data has the same encodings regardless of the encodings used by the XML source files.&lt;/para>
  &lt;/callout>
  &lt;callout arearefs="sitemapco3" xml:id="sitemapptr3">
    &lt;para>The &lt;tag class="element">targetset&lt;/tag> element is the root of the site map.&lt;/para>
  &lt;/callout&gt;
  &lt;callout arearefs="sitemapco4" xml:id="sitemapptr4"&gt;
    &lt;para&gt;The &lt;tag class="element"&gt;targetsetinfo&lt;/tag&gt; element allows you to provide a description for the document set or any other information that is relevant to the site map.&lt;/para&gt;
  &lt;/callout&gt;
  &lt;callout arearefs="sitemapco5" xml:id="sitemapptr5"&gt;
    &lt;para&gt;The &lt;tag class="element">sitemap&lt;/tag> element contains the directory layout of the output files.&lt;/para&gt;
  &lt;/callout&gt;
  &lt;callout arearefs="sitemapco6" xml:id="sitemapptr6"&gt;
    &lt;para&gt;The name of the top-level directory is not important in the generation of the target databases for the links. The links are generated relative to the top-level directory.&lt;/para&gt;
  &lt;/callout&gt;
  &lt;callout arearefs="sitemapco75" xml:id="sitemapptr75"&gt;
    &lt;para&gt;This is a directory that only contains other directories.&lt;/para&gt;
  &lt;/callout&gt;
  &lt;callout arearefs="sitemapco7" xml:id="sitemapptr7"&gt;
    &lt;para&gt;This directory holds a generated book.&lt;/para&gt;
  &lt;/callout&gt;
  &lt;callout arearefs="sitemapco8" xml:id="sitemapptr8"&gt;
    &lt;para&gt;The &lt;tag class="element">document&lt;/tag> element&apos;s &lt;tag class="attribute">targetdoc&lt;/tag> attribute specifies the identifier used in the &lt;tag class="element">olink&lt;/tag> element's &lt;tag class="attribute">targetdoc&lt;/tag> attribute when linking to targets in the document.&lt;/para&gt;
  &lt;/callout&gt;
  &lt;callout arearefs="sitemapco9" xml:id="sitemapptr9"&gt;
    &lt;para&gt;The target database is included in the site map using an &lt;tag class="element"&gt;xi:include&lt;/tag&gt; element. The path for each book's target database should be &lt;filename>&lt;replaceable>book_src_dir&lt;/replaceable>/target.db&lt;/filename&gt;.&lt;/para&gt;
  &lt;/callout&gt;
&lt;/calloutlist&gt;</programlisting>
            </example>
        </simplesect>
      </section>
  </section>
  <section xml:id="prog_arts">
    <title>In-line Code</title>
    <simplesect>
      <title>DocBook programming elements</title>
      <para>There are many instances where you need to place a code artifact in a block of text such as when you are referring to a Java class 
        or an XML element. DocBook has a number of specialized elements for placing code artifacts in-line. The ones commonly used 
        include:</para>
    <itemizedlist>
      <listitem>
        <para><tag class="element">tag</tag></para>
      </listitem>
      <listitem>
        <para><tag class="element">classname</tag></para>
      </listitem>
      <listitem>
        <para><tag class="element">interfacename</tag></para>
      </listitem>
      <listitem>
        <para><tag class="element">methodname</tag></para>
      </listitem>
      <listitem>
        <para><tag class="element">uri</tag></para>
      </listitem>
      <listitem>
        <para><tag class="element">package</tag></para>
      </listitem>
      <listitem>
        <para><tag class="element">code</tag></para>
      </listitem>
    </itemizedlist>
    </simplesect>
    <simplesect>
      <title>XML artifacts</title>
      <para>When placing XML artifacts such as element names or attribute names in your text wrap them in an 
        <tag class="element">tag</tag> element. To specify the type of XML artifact, the <tag class="element">tag</tag> element's 
        <tag class="attribute">class</tag> attribute is always used. <xref linkend="class_values"/> shows the values used for the 
        <tag class="attribute">class</tag> attribute.</para>
      <table xml:id="class_values">
        <title>Values for the <tag class="attribute">class</tag> Attribute</title>
        <tgroup cols="2">
          <colspec colwidth="1.5in"/>
          <thead>
            <row>
              <entry>Value</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><tag class="attvalue">attribute</tag></entry>
              <entry>Specifies that the artifact is an attribute of an XML element.</entry>
            </row>
            <row>
              <entry><tag class="attvalue">element</tag></entry>
              <entry>Specifies that the artifact is an XML element.</entry>
            </row>
            <row>
              <entry><tag class="attvalue">attvalue</tag></entry>
              <entry>Specifies that the artifact is the value of an XML element's attribute.</entry>
            </row>
            <row>
              <entry><tag class="attvalue">emptytag</tag></entry>
              <entry>Specifies an XML element that does not hold any data such as <tag class="emptytag">foo</tag>.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </simplesect>
    <simplesect>
      <title>Web Addresses, URIs, and E-Mail Addresses</title>
      <para>To specify a Web address or URI you use the <tag class="element">uri</tag> element.</para>
      <para>To specify an E-Mail address use the <tag class="element">email</tag> element.</para>
    </simplesect>
    <simplesect xml:id="gen_prog_arts">
      <title>General programming language artifacts</title>
      <para>DocBook defines a number of in-line tags for specifying programming artifacts. The commonly used tags are listed in 
        <xref linkend="progarti"/>.</para>
      <table frame="all" xml:id="progarti">
        <title>Elements for In-Line Programming Artifacts</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1.5in"/>
          <colspec colnum="2" colname="c2"/>
          <thead>
            <row>
              <entry>Element</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><tag class="element">type</tag></entry>
              <entry>Specifies that the artifact is a data type such as <type>int</type>.</entry>
            </row>
            <row>
              <entry><tag class="element">constant</tag></entry>
              <entry>Specifies that the artifact is a constant such as <constant>NULL</constant> or <constant>9</constant>.</entry>
            </row>
            <row>
              <entry><tag class="element">exceptionname</tag></entry>
              <entry>Specifies that the artifact is an exception. It could be the name of the exception or the name of the class that 
                implements the exception.</entry>
            </row>
            <row>
              <entry><tag class="element">function</tag></entry>
              <entry>Specifies that the artifact is a function such as <function>println()</function>.</entry>
            </row>
            <row>
              <entry><tag class="element">parameter</tag></entry>
              <entry>Specifies that the artifact is a parameter to a function or a method.</entry>
            </row>
            <row>
              <entry><tag class="element">varname</tag></entry>
              <entry>Specifies that the artifact is a variable.</entry>
            </row>
            <row>
              <entry><tag class="element">code</tag></entry>
              <entry>Used for generic code entries that do not fit into any other category.</entry>
            </row>
            <row>
              <entry><markup>code role="annotation"</markup></entry>
              <entry>Used for Java annotations.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </simplesect>
    <simplesect>
      <title>Object-oriented programming language artifacts</title>
      <para>In addition to the elements listed in <xref linkend="gen_prog_arts"/>, DocBook defines a number of elements that are used 
        specifically for object-oriented programming artifacts. They are listed in <xref linkend="oo_arts"/>.</para>
      <table frame="all" xml:id="oo_arts">
        <title>Elements for In-Line OO Programming Artifacts</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1.5in"/>
          <colspec colnum="2" colname="c2"/>
          <thead>
            <row>
              <entry>Element</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><tag class="element">interfacename</tag></entry>
              <entry>Specifies that the artifact is a Java interface the user must implement.</entry>
            </row>
            <row>
              <entry><tag class="element">oointerface</tag></entry>
              <entry>Specifies that the artifact is a Java interface the user must implement. Requires the use of an <tag class="element">modifier</tag> element that contains details about if the interface is public or private.</entry>
            </row>
            <row>
              <entry><tag class="element">classname</tag></entry>
              <entry>Specifies that the artifact is a Java class or an instantiated object.</entry>
            </row>
            <row>
              <entry><tag class="element">ooclass</tag></entry>
              <entry>Specifies that the artifact is a Java class. Requires the use of an <tag class="element">modifier</tag> element that 
                contains details about if the class is public/private or static/final.</entry>
            </row>
            <row>
              <entry><tag class="element">methodname</tag></entry>
              <entry>Specifies that the artifact is a method. Methods are different from functions in that methods are associated with classes and objects.</entry>
            </row>
            <row>
              <entry><tag class="element">ooexception</tag></entry>
              <entry>Specifies that the artifact is a Java exception. Requires the use of an <tag class="element">modifier</tag> element that 
                contains details about if the exception is public or private.</entry>
            </row>
            <row>
              <entry><tag class="element">package</tag></entry>
              <entry>Specifies that the artifact is the name of a Java or C++ package.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </simplesect>
  </section>
</chapter>